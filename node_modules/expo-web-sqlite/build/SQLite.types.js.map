{"version":3,"file":"SQLite.types.js","sourceRoot":"","sources":["../src/SQLite.types.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,8CAA8C;AAC9C,gDAAgD;AAChD,2DAA2D;AAC3D,EAAE;AACF,0EAA0E","sourcesContent":["// Definitions copied from `@types/websql` as we want\r\n// to expose a custom version of the API that:\r\n// - uses primitive `string` instead of `String`\r\n// - excludes some methods that are not exposed by our API.\r\n//\r\n// Original definitions by: TeamworkGuy2 <https://github.com/TeamworkGuy2>\r\n\r\n// @docsMissing\r\nexport interface Window {\r\n  openDatabase?: (\r\n    name: string,\r\n    version: string,\r\n    displayName: string,\r\n    estimatedSize: number,\r\n    creationCallback?: DatabaseCallback\r\n  ) => Database;\r\n}\r\n\r\n// @docsMissing\r\nexport type DatabaseCallback = (database: Database) => void;\r\n\r\n// @needsAudit @docsMissing\r\n/**\r\n * `Database` objects are returned by calls to `SQLite.openDatabase()`. Such an object represents a\r\n * connection to a database on your device.\r\n */\r\nexport interface Database {\r\n  version: string;\r\n\r\n  /**\r\n   * Execute a database transaction.\r\n   * @param callback A function representing the transaction to perform. Takes a Transaction\r\n   * (see below) as its only parameter, on which it can add SQL statements to execute.\r\n   * @param errorCallback Called if an error occurred processing this transaction. Takes a single\r\n   * parameter describing the error.\r\n   * @param successCallback Called when the transaction has completed executing on the database.\r\n   */\r\n  transaction(\r\n    callback: SQLTransactionCallback,\r\n    errorCallback?: SQLTransactionErrorCallback,\r\n    successCallback?: () => void\r\n  ): void;\r\n\r\n  readTransaction(\r\n    callback: SQLTransactionCallback,\r\n    errorCallback?: SQLTransactionErrorCallback,\r\n    successCallback?: () => void\r\n  ): void;\r\n}\r\n\r\n// @docsMissing\r\nexport type SQLTransactionCallback = (transaction: SQLTransaction) => void;\r\n\r\n// @docsMissing\r\nexport type SQLTransactionErrorCallback = (error: SQLError) => void;\r\n\r\n// @needsAudit\r\n/**\r\n * A `SQLTransaction` object is passed in as a parameter to the `callback` parameter for the\r\n * `db.transaction()` method on a `Database` (see above). It allows enqueuing SQL statements to\r\n * perform in a database transaction.\r\n */\r\nexport interface SQLTransaction {\r\n  /**\r\n   * Enqueue a SQL statement to execute in the transaction. Authors are strongly recommended to make\r\n   * use of the `?` placeholder feature of the method to avoid against SQL injection attacks, and to\r\n   * never construct SQL statements on the fly.\r\n   * @param sqlStatement A string containing a database query to execute expressed as SQL. The string\r\n   * may contain `?` placeholders, with values to be substituted listed in the `arguments` parameter.\r\n   * @param args An array of values (numbers, strings or nulls) to substitute for `?` placeholders in the\r\n   * SQL statement.\r\n   * @param callback Called when the query is successfully completed during the transaction. Takes\r\n   * two parameters: the transaction itself, and a `ResultSet` object (see below) with the results\r\n   * of the query.\r\n   * @param errorCallback Called if an error occurred executing this particular query in the\r\n   * transaction. Takes two parameters: the transaction itself, and the error object.\r\n   */\r\n  executeSql(\r\n    sqlStatement: string,\r\n    args?: (number | string | null)[],\r\n    callback?: SQLStatementCallback,\r\n    errorCallback?: SQLStatementErrorCallback\r\n  ): void;\r\n}\r\n\r\n// @docsMissing\r\nexport type SQLStatementCallback = (transaction: SQLTransaction, resultSet: SQLResultSet) => void;\r\n\r\n// @docsMissing\r\nexport type SQLStatementErrorCallback = (transaction: SQLTransaction, error: SQLError) => boolean;\r\n\r\n// @needsAudit\r\nexport type SQLResultSet = {\r\n  /**\r\n   * The row ID of the row that the SQL statement inserted into the database, if a row was inserted.\r\n   */\r\n  insertId?: number;\r\n  /**\r\n   * The number of rows that were changed by the SQL statement.\r\n   */\r\n  rowsAffected: number;\r\n  rows: SQLResultSetRowList;\r\n};\r\n\r\n// @needsAudit\r\nexport interface SQLResultSetRowList {\r\n  /**\r\n   * The number of rows returned by the query.\r\n   */\r\n  length: number;\r\n  /**\r\n   * Returns the row with the given `index`. If there is no such row, returns `null`.\r\n   * @param index Index of row to get.\r\n   */\r\n  item(index: number): any;\r\n  /**\r\n   * The actual array of rows returned by the query. Can be used directly instead of\r\n   * getting rows through rows.item().\r\n   */\r\n  _array: any[];\r\n}\r\n\r\n// @docsMissing\r\nexport declare class SQLError {\r\n  static UNKNOWN_ERR: number;\r\n  static DATABASE_ERR: number;\r\n  static VERSION_ERR: number;\r\n  static TOO_LARGE_ERR: number;\r\n  static QUOTA_ERR: number;\r\n  static SYNTAX_ERR: number;\r\n  static CONSTRAINT_ERR: number;\r\n  static TIMEOUT_ERR: number;\r\n\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\n/** Use `SQLiteDatabase` for experimental Promise support. */\r\nexport interface WebSQLDatabase extends Database {\r\n  exec(queries: Query[], readOnly: boolean, callback: SQLiteCallback): void;\r\n\r\n  /**\r\n   * Close the database.\r\n   */\r\n  closeAsync(): void;\r\n\r\n  /**\r\n   * Delete the database file.\r\n   * > The database has to be closed prior to deletion.\r\n   */\r\n  deleteAsync(): Promise<void>;\r\n}\r\n\r\n// @docsMissing\r\nexport type Query = { sql: string; args: unknown[] };\r\n\r\n// @docsMissing\r\nexport type ResultSetError = {\r\n  error: Error;\r\n};\r\n\r\n// @needsAudit\r\n/**\r\n * `ResultSet` objects are returned through second parameter of the `success` callback for the\r\n * `tx.executeSql()` method on a `SQLTransaction` (see above).\r\n */\r\nexport type ResultSet = {\r\n  /**\r\n   * The row ID of the row that the SQL statement inserted into the database, if a row was inserted.\r\n   */\r\n  insertId?: number;\r\n  /**\r\n   * The number of rows that were changed by the SQL statement.\r\n   */\r\n  rowsAffected: number;\r\n  rows: { [column: string]: any }[];\r\n};\r\n\r\n// @docsMissing\r\nexport type SQLiteCallback = (\r\n  error?: Error | null,\r\n  resultSet?: (ResultSetError | ResultSet)[]\r\n) => void;\r\n\r\n/** A transaction object to perform SQL statements in async mode. */\r\nexport interface SQLTransactionAsync {\r\n  /** Executes a SQL statement in async mode. */\r\n  executeSqlAsync(sqlStatement: string, args?: (number | string)[]): Promise<ResultSet>;\r\n}\r\n\r\n/** A transaction callback with given `SQLTransactionAsync` object to perform SQL statements in async mode. */\r\nexport type SQLTransactionAsyncCallback = (transaction: SQLTransactionAsync) => Promise<void>;\r\n"]}