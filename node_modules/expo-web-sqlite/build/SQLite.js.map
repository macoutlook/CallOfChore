{"version":3,"file":"SQLite.js","sourceRoot":"","sources":["../src/SQLite.ts"],"names":[],"mappings":"AAAA,OAAO,oBAAoB,CAAC;AAE5B,OAAO,kBAAkB,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAYxC,MAAM,UAAU,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;AAErD,SAAS,SAAS,CAAC,IAAc,EAAE,MAAa;IAC9C,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;KAC7B;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,gDAAgD;AAChD,MAAM,OAAO,cAAc;IACzB,KAAK,CAAS;IACd,OAAO,GAAY,KAAK,CAAC;IAEzB,YAAY,IAAY;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,OAAgB,EAAE,QAAiB,EAAE,QAAwB;QAChE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,QAAQ,CAAC,CAAC,IAAI,CACtE,CAAC,gBAAgB,EAAE,EAAE;YACnB,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC9D,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,0FAA0F;YAC1F,QAAQ,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9D,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,OAAgB,EAAE,QAAiB;QACjD,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,IAAI,CAC5C,IAAI,CAAC,KAAK,EACV,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAC5B,QAAQ,CACT,CAAC;QACF,OAAO,gBAAgB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;IAExB;;OAEG;IACH,UAAU;QACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CACb,qBAAqB,IAAI,CAAC,KAAK,gEAAgE,CAChG,CAAC;SACH;QAED,OAAO,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gBAAgB,CACpB,aAA0C,EAC1C,WAAoB,KAAK;QAEzB,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3D,IAAI;YACF,MAAM,WAAW,GAAG,IAAI,uBAAuB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAChE,MAAM,aAAa,CAAC,WAAW,CAAC,CAAC;YACjC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;SAC1D;QAAC,OAAO,CAAU,EAAE;YACnB,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,CAAC,CAAC;SACT;IACH,CAAC;CACF;AAED,SAAS,eAAe,CAAC,KAAY;IACnC,OAAO,QAAQ,CAAC,EAAE,KAAK,SAAS;QAC9B,CAAC,CAAC;YACE,GAAG,EAAE,KAAK,CAAC,GAAG;YACd,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;SAClC;QACH,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,SAAS,qBAAqB,CAAC,YAAY;IACzC,MAAM,CAAC,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,YAAY,CAAC;IAC3E,iGAAiG;IACjG,wBAAwB;IACxB,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,OAAO,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,YAAY,CAAC,EAAoB,CAAC;KAC7D;IAED,OAAO;QACL,QAAQ;QACR,YAAY;QACZ,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KACjD,CAAC;AACJ,CAAC;AAED,SAAS,WAAW,CAAI,IAAO;IAC7B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,qCAAqC;QACrC,OAAO,IAAI;aACR,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC;aAClC,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC;aAClC,OAAO,CAAC,SAAS,EAAE,cAAc,CAAQ,CAAC;QAC7C,oCAAoC;KACrC;SAAM;QACL,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED,MAAM,uBAAuB,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;AAEnE,2BAA2B;AAC3B;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,YAAY,CAC1B,IAAY,EACZ,UAAkB,KAAK,EACvB,cAAsB,IAAI,EAC1B,OAAe,CAAC,EAChB,QAAuC;IAEvC,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,MAAM,IAAI,SAAS,CAAC,yCAAyC,CAAC,CAAC;KAChE;IACD,MAAM,EAAE,GAAG,uBAAuB,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC/E,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACnC,EAAE,CAAC,UAAU,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IAC1C,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACjD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;;GAGG;AACH,MAAM,OAAO,uBAAuB;IACL;IAAqC;IAAlE,YAA6B,EAAkB,EAAmB,QAAiB;QAAtD,OAAE,GAAF,EAAE,CAAgB;QAAmB,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IAEvF,KAAK,CAAC,eAAe,CAAC,YAAoB,EAAE,IAA0B;QACpE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,SAAS,CACxC,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC,EACzC,IAAI,CAAC,QAAQ,CACd,CAAC;QACF,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;CACF","sourcesContent":["import './polyfillNextTick';\r\n\r\nimport customOpenDatabase from '@expo/websql/custom';\r\nimport { requireNativeModule } from 'expo-modules-core';\r\nimport { Platform } from 'react-native';\r\n\r\nimport type {\r\n  Query,\r\n  ResultSet,\r\n  ResultSetError,\r\n  SQLiteCallback,\r\n  SQLTransactionAsyncCallback,\r\n  SQLTransactionAsync,\r\n  WebSQLDatabase,\r\n} from './SQLite.types';\r\n\r\nconst ExpoSQLite = requireNativeModule('ExpoSQLite');\r\n\r\nfunction zipObject(keys: string[], values: any[]) {\r\n  const result = {};\r\n  for (let i = 0; i < keys.length; i++) {\r\n    result[keys[i]] = values[i];\r\n  }\r\n  return result;\r\n}\r\n\r\n/** The database returned by `openDatabase()` */\r\nexport class SQLiteDatabase {\r\n  _name: string;\r\n  _closed: boolean = false;\r\n\r\n  constructor(name: string) {\r\n    this._name = name;\r\n  }\r\n\r\n  /**\r\n   * Executes the SQL statement and returns a callback resolving with the result.\r\n   */\r\n  exec(queries: Query[], readOnly: boolean, callback: SQLiteCallback): void {\r\n    if (this._closed) {\r\n      throw new Error(`The SQLite database is closed`);\r\n    }\r\n\r\n    ExpoSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(\r\n      (nativeResultSets) => {\r\n        callback(null, nativeResultSets.map(_deserializeResultSet));\r\n      },\r\n      (error) => {\r\n        // TODO: make the native API consistently reject with an error, not a string or other type\r\n        callback(error instanceof Error ? error : new Error(error));\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executes the SQL statement and returns a Promise resolving with the result.\r\n   */\r\n  async execAsync(queries: Query[], readOnly: boolean): Promise<ResultSet[]> {\r\n    if (this._closed) {\r\n      throw new Error(`The SQLite database is closed`);\r\n    }\r\n\r\n    const nativeResultSets = await ExpoSQLite.exec(\r\n      this._name,\r\n      queries.map(_serializeQuery),\r\n      readOnly\r\n    );\r\n    return nativeResultSets.map(_deserializeResultSet);\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use `closeAsync()` instead.\r\n   */\r\n  close = this.closeAsync;\r\n\r\n  /**\r\n   * Close the database.\r\n   */\r\n  closeAsync(): void {\r\n    this._closed = true;\r\n    return ExpoSQLite.close(this._name);\r\n  }\r\n\r\n  /**\r\n   * Delete the database file.\r\n   * > The database has to be closed prior to deletion.\r\n   */\r\n  deleteAsync(): Promise<void> {\r\n    if (!this._closed) {\r\n      throw new Error(\r\n        `Unable to delete '${this._name}' database that is currently open. Close it prior to deletion.`\r\n      );\r\n    }\r\n\r\n    return ExpoSQLite.deleteAsync(this._name);\r\n  }\r\n\r\n  /**\r\n   * Creates a new transaction with Promise support.\r\n   * @param asyncCallback A `SQLTransactionAsyncCallback` function that can perform SQL statements in a transaction.\r\n   * @param readOnly true if all the SQL statements in the callback are read only.\r\n   */\r\n  async transactionAsync(\r\n    asyncCallback: SQLTransactionAsyncCallback,\r\n    readOnly: boolean = false\r\n  ): Promise<void> {\r\n    await this.execAsync([{ sql: 'BEGIN;', args: [] }], false);\r\n    try {\r\n      const transaction = new ExpoSQLTransactionAsync(this, readOnly);\r\n      await asyncCallback(transaction);\r\n      await this.execAsync([{ sql: 'END;', args: [] }], false);\r\n    } catch (e: unknown) {\r\n      await this.execAsync([{ sql: 'ROLLBACK;', args: [] }], false);\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _serializeQuery(query: Query): Query | [string, any[]] {\r\n  return Platform.OS === 'android'\r\n    ? {\r\n        sql: query.sql,\r\n        args: query.args.map(_escapeBlob),\r\n      }\r\n    : [query.sql, query.args];\r\n}\r\n\r\nfunction _deserializeResultSet(nativeResult): ResultSet | ResultSetError {\r\n  const [errorMessage, insertId, rowsAffected, columns, rows] = nativeResult;\r\n  // TODO: send more structured error information from the native module so we can better construct\r\n  // a SQLException object\r\n  if (errorMessage !== null) {\r\n    return { error: new Error(errorMessage) } as ResultSetError;\r\n  }\r\n\r\n  return {\r\n    insertId,\r\n    rowsAffected,\r\n    rows: rows.map((row) => zipObject(columns, row)),\r\n  };\r\n}\r\n\r\nfunction _escapeBlob<T>(data: T): T {\r\n  if (typeof data === 'string') {\r\n    /* eslint-disable no-control-regex */\r\n    return data\r\n      .replace(/\\u0002/g, '\\u0002\\u0002')\r\n      .replace(/\\u0001/g, '\\u0001\\u0002')\r\n      .replace(/\\u0000/g, '\\u0001\\u0001') as any;\r\n    /* eslint-enable no-control-regex */\r\n  } else {\r\n    return data;\r\n  }\r\n}\r\n\r\nconst _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\r\n\r\n// @needsAudit @docsMissing\r\n/**\r\n * Open a database, creating it if it doesn't exist, and return a `Database` object. On disk,\r\n * the database will be created under the app's [documents directory](./filesystem), i.e.\r\n * `${FileSystem.documentDirectory}/SQLite/${name}`.\r\n * > The `version`, `description` and `size` arguments are ignored, but are accepted by the function\r\n * for compatibility with the WebSQL specification.\r\n * @param name Name of the database file to open.\r\n * @param version\r\n * @param description\r\n * @param size\r\n * @param callback\r\n * @return\r\n */\r\nexport function openDatabase(\r\n  name: string,\r\n  version: string = '1.0',\r\n  description: string = name,\r\n  size: number = 1,\r\n  callback?: (db: SQLiteDatabase) => void\r\n): WebSQLDatabase {\r\n  if (name === undefined) {\r\n    throw new TypeError(`The database name must not be undefined`);\r\n  }\r\n  const db = _openExpoSQLiteDatabase(name, version, description, size, callback);\r\n  db.exec = db._db.exec.bind(db._db);\r\n  db.closeAsync = db._db.close.bind(db._db);\r\n  db.deleteAsync = db._db.deleteAsync.bind(db._db);\r\n  return db;\r\n}\r\n\r\n/**\r\n * Internal data structure for the async transaction API.\r\n * @internal\r\n */\r\nexport class ExpoSQLTransactionAsync implements SQLTransactionAsync {\r\n  constructor(private readonly db: SQLiteDatabase, private readonly readOnly: boolean) {}\r\n\r\n  async executeSqlAsync(sqlStatement: string, args?: (number | string)[]): Promise<ResultSet> {\r\n    const resultSets = await this.db.execAsync(\r\n      [{ sql: sqlStatement, args: args ?? [] }],\r\n      this.readOnly\r\n    );\r\n    return resultSets[0];\r\n  }\r\n}\r\n"]}